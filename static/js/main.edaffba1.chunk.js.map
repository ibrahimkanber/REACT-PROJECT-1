{"version":3,"sources":["component/Categorylist.js","component/CartSummary.js","component/Navi.js","component/Productlist.js","App.js","serviceWorker.js","index.js"],"names":["Categorylist","state","categories","getCategories","fetch","then","res","json","data","setState","this","props","info","title","ListGroup","map","category","ListGroupItem","active","categoryName","currentCategory","onClick","changeCategory","key","id","Component","CartSummary","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","cart","length","DropdownMenu","right","DropdownItem","divider","Navi","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","Collapse","navbar","Nav","className","NavItem","NavLink","cartInfo","Productlist","Row","Col","xs","Table","products","product","scope","productName","quantityPerUnit","unitPrice","unitsInStock","Button","add","App","getProducts","sayHi","console","log","addToCart","newCart","addedItem","find","c","quantity","push","url","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.edaffba1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { ListGroup, ListGroupItem } from \"reactstrap\";\r\n\r\nexport default class Categorylist extends Component {\r\n  state = {\r\n    categories:[]\r\n\r\n  };\r\n\r\n  getCategories=()=>{\r\n      fetch(\" http://localhost:3000/categories\")\r\n      .then(res=>res.json())\r\n      .then(data=>this.setState({categories:data}))\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.getCategories()\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>{this.props.info.title}</h3>\r\n        <ListGroup>\r\n          {this.state.categories.map((category) => (\r\n            <ListGroupItem active={category.categoryName===this.props.currentCategory?true:false}\r\n              onClick={() => this.props.changeCategory(category)}\r\n              key={category.id}\r\n            >\r\n              {category.categoryName}\r\n            </ListGroupItem>\r\n          ))}\r\n        </ListGroup>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n  } from 'reactstrap';\r\nexport default class CartSummary extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <UncontrolledDropdown nav inNavbar>\r\n          <DropdownToggle nav caret>\r\n            Options={this.props.cart.length}\r\n          </DropdownToggle>\r\n          <DropdownMenu right>\r\n            <DropdownItem>Option 1</DropdownItem>\r\n            <DropdownItem>Option 2</DropdownItem>\r\n            <DropdownItem divider />\r\n            <DropdownItem>Reset</DropdownItem>\r\n          </DropdownMenu>\r\n        </UncontrolledDropdown>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\n\r\n\r\n\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n \r\n} from 'reactstrap';\r\n\r\nimport CartSummary from './CartSummary';\r\n\r\nconst Navi = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar color=\"light\" light expand=\"md\">\r\n        <NavbarBrand href=\"/\">reactstrap</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n            <NavItem>\r\n              <NavLink href=\"/components/\">Components</NavLink>\r\n            </NavItem>\r\n            <NavItem>\r\n              <NavLink href=\"https://github.com/reactstrap/reactstrap\">GitHub</NavLink>\r\n            </NavItem>\r\n            <CartSummary cart={props.cartInfo}/>\r\n          </Nav>\r\n          \r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navi;","import React, { Component } from \"react\";\r\nimport { Col, Row ,Table,Button} from \"reactstrap\";\r\n\r\nexport default class Productlist extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col xs=\"10\">\r\n            <h3>\r\n              {this.props.info.title}-{this.props.currentCategory}\r\n            </h3>\r\n            <Table>\r\n              <thead>\r\n                <tr>\r\n                  <th>#</th>\r\n                  <th>Product Name1</th>\r\n                  <th>Quantity Per Unit</th>\r\n                  <th>Unit Price</th>\r\n                  <th>Units In Stock</th>\r\n                  <th></th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              {this.props.products.map((product) => (\r\n            <tr key={product.id}>\r\n              <th scope=\"row\">{product.id}</th>\r\n                  <td>{product.productName}</td>\r\n                  <td>{product.quantityPerUnit}</td>\r\n                  <td>{product.unitPrice}</td>\r\n                  <td>{product.unitsInStock}</td>\r\n                  <td> <Button color=\"info\" onClick={()=>this.props.add(product)} >Add</Button></td>\r\n        \r\n            </tr>\r\n          ))}\r\n              </tbody>\r\n            </Table>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Categorylist from \"./component/Categorylist\";\nimport Navi from \"./component/Navi\";\nimport Productlist from \"./component/Productlist\";\nimport { Col, Container, Row } from \"reactstrap\";\nexport default class App extends Component {\n  state = { currentCategory: \"\", products: [],cart:[] };\n  changeCategory = (category) => {\n    this.setState({ currentCategory: category.categoryName });\n    this.getProducts(category.id);\n  };\n  sayHi = () => {\n    console.log(\"hello\");\n  };\n\n  addToCart = (product) => {\n    console.log(product)\n    let newCart=this.state.cart;\n    var addedItem=newCart.find(c=>c.product.id===product.id);\n    // console.log(addedItem);\n    if(addedItem){\n      addedItem.quantity+=1;\n    }else{\n      // console.log(product)\n      newCart.push({product:product ,quantity:1})\n      // console.log(newCart)\n    }\n    // console.log(newCart)\n    this.setState({cart:newCart})\n    console.log(this.state.cart)\n  };\n\n  getProducts = (id) => {\n    let url = \"http://localhost:3000/products\";\n    if (id) {\n      url += \"?categoryId=\" + id;\n    }\n    fetch(url)\n      .then((res) => res.json())\n      .then((data) => this.setState({ products: data }));\n  };\n\n  componentDidMount() {\n    this.getProducts();\n  }\n\n\n\n  render() {\n    let categoryInfo = { title: \"categories\" };\n    let productInfo = { title: \"products\" };\n    return (\n      <div>\n        <Container>\n          <Navi cartInfo={this.state.cart}/>\n          <Row>\n            <Col xs=\"3\">\n              <Categorylist\n                currentCategory={this.state.currentCategory}\n                changeCategory={this.changeCategory}\n                info={categoryInfo}\n              />\n            </Col>\n            <Col xs=\"9\">\n              <Productlist\n                products={this.state.products}\n                currentCategory={this.state.currentCategory}\n                info={productInfo}\n                \n                add={this.addToCart}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}